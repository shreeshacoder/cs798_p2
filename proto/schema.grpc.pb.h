// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: schema.proto
#ifndef GRPC_schema_2eproto__INCLUDED
#define GRPC_schema_2eproto__INCLUDED

#include "schema.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace NfsProtocol {

class NfsServer final {
 public:
  static constexpr char const* service_full_name() {
    return "NfsProtocol.NfsServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::NfsProtocol::c_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> Asyncserver_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(Asyncserver_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> PrepareAsyncserver_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(PrepareAsyncserver_mkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::NfsProtocol::c_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> Asyncserver_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(Asyncserver_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> PrepareAsyncserver_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(PrepareAsyncserver_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::NfsProtocol::c_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> Asyncserver_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(Asyncserver_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>> PrepareAsyncserver_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>>(PrepareAsyncserver_renameRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* Asyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* PrepareAsyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* Asyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* PrepareAsyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* Asyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NfsProtocol::c_response>* PrepareAsyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::NfsProtocol::c_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> Asyncserver_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(Asyncserver_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> PrepareAsyncserver_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(PrepareAsyncserver_mkdirRaw(context, request, cq));
    }
    ::grpc::Status server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::NfsProtocol::c_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> Asyncserver_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(Asyncserver_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> PrepareAsyncserver_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(PrepareAsyncserver_rmdirRaw(context, request, cq));
    }
    ::grpc::Status server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::NfsProtocol::c_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> Asyncserver_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(Asyncserver_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>> PrepareAsyncserver_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>>(PrepareAsyncserver_renameRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) override;
      void server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) override;
      void server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* Asyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* PrepareAsyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* Asyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* PrepareAsyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* Asyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* PrepareAsyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_server_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_server_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_server_rename_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response);
    virtual ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response);
    virtual ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_server_mkdir() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_mkdir(::grpc::ServerContext* context, ::NfsProtocol::mkdir_request* request, ::grpc::ServerAsyncResponseWriter< ::NfsProtocol::c_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_server_rmdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_rmdir(::grpc::ServerContext* context, ::NfsProtocol::rmdir_request* request, ::grpc::ServerAsyncResponseWriter< ::NfsProtocol::c_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_server_rename() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_rename(::grpc::ServerContext* context, ::NfsProtocol::rename_request* request, ::grpc::ServerAsyncResponseWriter< ::NfsProtocol::c_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_server_mkdir<WithAsyncMethod_server_rmdir<WithAsyncMethod_server_rename<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_server_mkdir() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::NfsProtocol::mkdir_request, ::NfsProtocol::c_response>(
          [this](::grpc::ServerContext* context,
                 const ::NfsProtocol::mkdir_request* request,
                 ::NfsProtocol::c_response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->server_mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_server_rmdir() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::NfsProtocol::rmdir_request, ::NfsProtocol::c_response>(
          [this](::grpc::ServerContext* context,
                 const ::NfsProtocol::rmdir_request* request,
                 ::NfsProtocol::c_response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->server_rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_server_rename() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::NfsProtocol::rename_request, ::NfsProtocol::c_response>(
          [this](::grpc::ServerContext* context,
                 const ::NfsProtocol::rename_request* request,
                 ::NfsProtocol::c_response* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->server_rename(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_server_mkdir<ExperimentalWithCallbackMethod_server_rmdir<ExperimentalWithCallbackMethod_server_rename<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_server_mkdir() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_server_rmdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_server_rename() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_server_mkdir() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_mkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_server_rmdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_rmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_server_rename() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestserver_rename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_server_mkdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->server_mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_mkdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_server_rmdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->server_rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_rmdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_server_rename() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->server_rename(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void server_rename(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_server_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_server_mkdir() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::NfsProtocol::mkdir_request, ::NfsProtocol::c_response>(std::bind(&WithStreamedUnaryMethod_server_mkdir<BaseClass>::Streamedserver_mkdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_server_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedserver_mkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NfsProtocol::mkdir_request,::NfsProtocol::c_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_server_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_server_rmdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::NfsProtocol::rmdir_request, ::NfsProtocol::c_response>(std::bind(&WithStreamedUnaryMethod_server_rmdir<BaseClass>::Streamedserver_rmdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_server_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedserver_rmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NfsProtocol::rmdir_request,::NfsProtocol::c_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_server_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_server_rename() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::NfsProtocol::rename_request, ::NfsProtocol::c_response>(std::bind(&WithStreamedUnaryMethod_server_rename<BaseClass>::Streamedserver_rename, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_server_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedserver_rename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NfsProtocol::rename_request,::NfsProtocol::c_response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_server_mkdir<WithStreamedUnaryMethod_server_rmdir<WithStreamedUnaryMethod_server_rename<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_server_mkdir<WithStreamedUnaryMethod_server_rmdir<WithStreamedUnaryMethod_server_rename<Service > > > StreamedService;
};

}  // namespace NfsProtocol


#endif  // GRPC_schema_2eproto__INCLUDED
