// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef PROTOBUF_INCLUDED_schema_2eproto
#define PROTOBUF_INCLUDED_schema_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto 

namespace protobuf_schema_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {
class attributes;
class attributesDefaultTypeInternal;
extern attributesDefaultTypeInternal _attributes_default_instance_;
class mkdir_request;
class mkdir_requestDefaultTypeInternal;
extern mkdir_requestDefaultTypeInternal _mkdir_request_default_instance_;
class mkdir_response;
class mkdir_responseDefaultTypeInternal;
extern mkdir_responseDefaultTypeInternal _mkdir_response_default_instance_;
}  // namespace NfsProtocol
namespace google {
namespace protobuf {
template<> ::NfsProtocol::attributes* Arena::CreateMaybeMessage<::NfsProtocol::attributes>(Arena*);
template<> ::NfsProtocol::mkdir_request* Arena::CreateMaybeMessage<::NfsProtocol::mkdir_request>(Arena*);
template<> ::NfsProtocol::mkdir_response* Arena::CreateMaybeMessage<::NfsProtocol::mkdir_response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NfsProtocol {

// ===================================================================

class attributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.attributes) */ {
 public:
  attributes();
  virtual ~attributes();

  attributes(const attributes& from);

  inline attributes& operator=(const attributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  attributes(attributes&& from) noexcept
    : attributes() {
    *this = ::std::move(from);
  }

  inline attributes& operator=(attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const attributes* internal_default_instance() {
    return reinterpret_cast<const attributes*>(
               &_attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(attributes* other);
  friend void swap(attributes& a, attributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline attributes* New() const final {
    return CreateMaybeMessage<attributes>(NULL);
  }

  attributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<attributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const attributes& from);
  void MergeFrom(const attributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(attributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::uint64 a() const;
  void set_a(::google::protobuf::uint64 value);

  // uint64 b = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::uint64 b() const;
  void set_b(::google::protobuf::uint64 value);

  // uint64 c = 3;
  void clear_c();
  static const int kCFieldNumber = 3;
  ::google::protobuf::uint64 c() const;
  void set_c(::google::protobuf::uint64 value);

  // uint64 d = 4;
  void clear_d();
  static const int kDFieldNumber = 4;
  ::google::protobuf::uint64 d() const;
  void set_d(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NfsProtocol.attributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 a_;
  ::google::protobuf::uint64 b_;
  ::google::protobuf::uint64 c_;
  ::google::protobuf::uint64 d_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mkdir_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.mkdir_request) */ {
 public:
  mkdir_request();
  virtual ~mkdir_request();

  mkdir_request(const mkdir_request& from);

  inline mkdir_request& operator=(const mkdir_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mkdir_request(mkdir_request&& from) noexcept
    : mkdir_request() {
    *this = ::std::move(from);
  }

  inline mkdir_request& operator=(mkdir_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const mkdir_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mkdir_request* internal_default_instance() {
    return reinterpret_cast<const mkdir_request*>(
               &_mkdir_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mkdir_request* other);
  friend void swap(mkdir_request& a, mkdir_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mkdir_request* New() const final {
    return CreateMaybeMessage<mkdir_request>(NULL);
  }

  mkdir_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mkdir_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mkdir_request& from);
  void MergeFrom(const mkdir_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mkdir_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dirfh = 1;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::std::string& dirfh() const;
  void set_dirfh(const ::std::string& value);
  #if LANG_CXX11
  void set_dirfh(::std::string&& value);
  #endif
  void set_dirfh(const char* value);
  void set_dirfh(const char* value, size_t size);
  ::std::string* mutable_dirfh();
  ::std::string* release_dirfh();
  void set_allocated_dirfh(::std::string* dirfh);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .NfsProtocol.attributes attr = 3;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 3;
  private:
  const ::NfsProtocol::attributes& _internal_attr() const;
  public:
  const ::NfsProtocol::attributes& attr() const;
  ::NfsProtocol::attributes* release_attr();
  ::NfsProtocol::attributes* mutable_attr();
  void set_allocated_attr(::NfsProtocol::attributes* attr);

  // @@protoc_insertion_point(class_scope:NfsProtocol.mkdir_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dirfh_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NfsProtocol::attributes* attr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mkdir_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.mkdir_response) */ {
 public:
  mkdir_response();
  virtual ~mkdir_response();

  mkdir_response(const mkdir_response& from);

  inline mkdir_response& operator=(const mkdir_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mkdir_response(mkdir_response&& from) noexcept
    : mkdir_response() {
    *this = ::std::move(from);
  }

  inline mkdir_response& operator=(mkdir_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const mkdir_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mkdir_response* internal_default_instance() {
    return reinterpret_cast<const mkdir_response*>(
               &_mkdir_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(mkdir_response* other);
  friend void swap(mkdir_response& a, mkdir_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mkdir_response* New() const final {
    return CreateMaybeMessage<mkdir_response>(NULL);
  }

  mkdir_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mkdir_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mkdir_response& from);
  void MergeFrom(const mkdir_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mkdir_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fh = 1;
  void clear_fh();
  static const int kFhFieldNumber = 1;
  const ::std::string& fh() const;
  void set_fh(const ::std::string& value);
  #if LANG_CXX11
  void set_fh(::std::string&& value);
  #endif
  void set_fh(const char* value);
  void set_fh(const char* value, size_t size);
  ::std::string* mutable_fh();
  ::std::string* release_fh();
  void set_allocated_fh(::std::string* fh);

  // .NfsProtocol.attributes attr = 2;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 2;
  private:
  const ::NfsProtocol::attributes& _internal_attr() const;
  public:
  const ::NfsProtocol::attributes& attr() const;
  ::NfsProtocol::attributes* release_attr();
  ::NfsProtocol::attributes* mutable_attr();
  void set_allocated_attr(::NfsProtocol::attributes* attr);

  // @@protoc_insertion_point(class_scope:NfsProtocol.mkdir_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fh_;
  ::NfsProtocol::attributes* attr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// attributes

// uint64 a = 1;
inline void attributes::clear_a() {
  a_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::a() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.a)
  return a_;
}
inline void attributes::set_a(::google::protobuf::uint64 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.a)
}

// uint64 b = 2;
inline void attributes::clear_b() {
  b_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::b() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.b)
  return b_;
}
inline void attributes::set_b(::google::protobuf::uint64 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.b)
}

// uint64 c = 3;
inline void attributes::clear_c() {
  c_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::c() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.c)
  return c_;
}
inline void attributes::set_c(::google::protobuf::uint64 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.c)
}

// uint64 d = 4;
inline void attributes::clear_d() {
  d_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::d() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.d)
  return d_;
}
inline void attributes::set_d(::google::protobuf::uint64 value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.d)
}

// -------------------------------------------------------------------

// mkdir_request

// string dirfh = 1;
inline void mkdir_request::clear_dirfh() {
  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mkdir_request::dirfh() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.dirfh)
  return dirfh_.GetNoArena();
}
inline void mkdir_request::set_dirfh(const ::std::string& value) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.mkdir_request.dirfh)
}
#if LANG_CXX11
inline void mkdir_request::set_dirfh(::std::string&& value) {
  
  dirfh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.mkdir_request.dirfh)
}
#endif
inline void mkdir_request::set_dirfh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.mkdir_request.dirfh)
}
inline void mkdir_request::set_dirfh(const char* value, size_t size) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.mkdir_request.dirfh)
}
inline ::std::string* mkdir_request::mutable_dirfh() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.dirfh)
  return dirfh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mkdir_request::release_dirfh() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.dirfh)
  
  return dirfh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mkdir_request::set_allocated_dirfh(::std::string* dirfh) {
  if (dirfh != NULL) {
    
  } else {
    
  }
  dirfh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dirfh);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.dirfh)
}

// string name = 2;
inline void mkdir_request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mkdir_request::name() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.name)
  return name_.GetNoArena();
}
inline void mkdir_request::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.mkdir_request.name)
}
#if LANG_CXX11
inline void mkdir_request::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.mkdir_request.name)
}
#endif
inline void mkdir_request::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.mkdir_request.name)
}
inline void mkdir_request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.mkdir_request.name)
}
inline ::std::string* mkdir_request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mkdir_request::release_name() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mkdir_request::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.name)
}

// .NfsProtocol.attributes attr = 3;
inline bool mkdir_request::has_attr() const {
  return this != internal_default_instance() && attr_ != NULL;
}
inline void mkdir_request::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
}
inline const ::NfsProtocol::attributes& mkdir_request::_internal_attr() const {
  return *attr_;
}
inline const ::NfsProtocol::attributes& mkdir_request::attr() const {
  const ::NfsProtocol::attributes* p = attr_;
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::NfsProtocol::attributes*>(
      &::NfsProtocol::_attributes_default_instance_);
}
inline ::NfsProtocol::attributes* mkdir_request::release_attr() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.attr)
  
  ::NfsProtocol::attributes* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::NfsProtocol::attributes* mkdir_request::mutable_attr() {
  
  if (attr_ == NULL) {
    auto* p = CreateMaybeMessage<::NfsProtocol::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.attr)
  return attr_;
}
inline void mkdir_request::set_allocated_attr(::NfsProtocol::attributes* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr_;
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.attr)
}

// -------------------------------------------------------------------

// mkdir_response

// string fh = 1;
inline void mkdir_response::clear_fh() {
  fh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mkdir_response::fh() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_response.fh)
  return fh_.GetNoArena();
}
inline void mkdir_response::set_fh(const ::std::string& value) {
  
  fh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.mkdir_response.fh)
}
#if LANG_CXX11
inline void mkdir_response::set_fh(::std::string&& value) {
  
  fh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.mkdir_response.fh)
}
#endif
inline void mkdir_response::set_fh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.mkdir_response.fh)
}
inline void mkdir_response::set_fh(const char* value, size_t size) {
  
  fh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.mkdir_response.fh)
}
inline ::std::string* mkdir_response::mutable_fh() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_response.fh)
  return fh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mkdir_response::release_fh() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_response.fh)
  
  return fh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mkdir_response::set_allocated_fh(::std::string* fh) {
  if (fh != NULL) {
    
  } else {
    
  }
  fh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fh);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_response.fh)
}

// .NfsProtocol.attributes attr = 2;
inline bool mkdir_response::has_attr() const {
  return this != internal_default_instance() && attr_ != NULL;
}
inline void mkdir_response::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
}
inline const ::NfsProtocol::attributes& mkdir_response::_internal_attr() const {
  return *attr_;
}
inline const ::NfsProtocol::attributes& mkdir_response::attr() const {
  const ::NfsProtocol::attributes* p = attr_;
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_response.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::NfsProtocol::attributes*>(
      &::NfsProtocol::_attributes_default_instance_);
}
inline ::NfsProtocol::attributes* mkdir_response::release_attr() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_response.attr)
  
  ::NfsProtocol::attributes* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::NfsProtocol::attributes* mkdir_response::mutable_attr() {
  
  if (attr_ == NULL) {
    auto* p = CreateMaybeMessage<::NfsProtocol::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_response.attr)
  return attr_;
}
inline void mkdir_response::set_allocated_attr(::NfsProtocol::attributes* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr_;
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_response.attr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NfsProtocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_schema_2eproto
