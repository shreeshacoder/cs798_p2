// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef PROTOBUF_INCLUDED_schema_2eproto
#define PROTOBUF_INCLUDED_schema_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto 

namespace protobuf_schema_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {
class attributes;
class attributesDefaultTypeInternal;
extern attributesDefaultTypeInternal _attributes_default_instance_;
class c_response;
class c_responseDefaultTypeInternal;
extern c_responseDefaultTypeInternal _c_response_default_instance_;
class mkdir_request;
class mkdir_requestDefaultTypeInternal;
extern mkdir_requestDefaultTypeInternal _mkdir_request_default_instance_;
class rename_request;
class rename_requestDefaultTypeInternal;
extern rename_requestDefaultTypeInternal _rename_request_default_instance_;
class rmdir_request;
class rmdir_requestDefaultTypeInternal;
extern rmdir_requestDefaultTypeInternal _rmdir_request_default_instance_;
}  // namespace NfsProtocol
namespace google {
namespace protobuf {
template<> ::NfsProtocol::attributes* Arena::CreateMaybeMessage<::NfsProtocol::attributes>(Arena*);
template<> ::NfsProtocol::c_response* Arena::CreateMaybeMessage<::NfsProtocol::c_response>(Arena*);
template<> ::NfsProtocol::mkdir_request* Arena::CreateMaybeMessage<::NfsProtocol::mkdir_request>(Arena*);
template<> ::NfsProtocol::rename_request* Arena::CreateMaybeMessage<::NfsProtocol::rename_request>(Arena*);
template<> ::NfsProtocol::rmdir_request* Arena::CreateMaybeMessage<::NfsProtocol::rmdir_request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NfsProtocol {

// ===================================================================

class attributes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.attributes) */ {
 public:
  attributes();
  virtual ~attributes();

  attributes(const attributes& from);

  inline attributes& operator=(const attributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  attributes(attributes&& from) noexcept
    : attributes() {
    *this = ::std::move(from);
  }

  inline attributes& operator=(attributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const attributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const attributes* internal_default_instance() {
    return reinterpret_cast<const attributes*>(
               &_attributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(attributes* other);
  friend void swap(attributes& a, attributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline attributes* New() const final {
    return CreateMaybeMessage<attributes>(NULL);
  }

  attributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<attributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const attributes& from);
  void MergeFrom(const attributes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(attributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 st_dev = 1;
  void clear_st_dev();
  static const int kStDevFieldNumber = 1;
  ::google::protobuf::uint64 st_dev() const;
  void set_st_dev(::google::protobuf::uint64 value);

  // uint64 st_ino = 2;
  void clear_st_ino();
  static const int kStInoFieldNumber = 2;
  ::google::protobuf::uint64 st_ino() const;
  void set_st_ino(::google::protobuf::uint64 value);

  // uint64 st_mode = 3;
  void clear_st_mode();
  static const int kStModeFieldNumber = 3;
  ::google::protobuf::uint64 st_mode() const;
  void set_st_mode(::google::protobuf::uint64 value);

  // uint64 st_nlink = 4;
  void clear_st_nlink();
  static const int kStNlinkFieldNumber = 4;
  ::google::protobuf::uint64 st_nlink() const;
  void set_st_nlink(::google::protobuf::uint64 value);

  // uint64 st_uid = 5;
  void clear_st_uid();
  static const int kStUidFieldNumber = 5;
  ::google::protobuf::uint64 st_uid() const;
  void set_st_uid(::google::protobuf::uint64 value);

  // uint64 st_gid = 6;
  void clear_st_gid();
  static const int kStGidFieldNumber = 6;
  ::google::protobuf::uint64 st_gid() const;
  void set_st_gid(::google::protobuf::uint64 value);

  // uint64 st_rdev = 7;
  void clear_st_rdev();
  static const int kStRdevFieldNumber = 7;
  ::google::protobuf::uint64 st_rdev() const;
  void set_st_rdev(::google::protobuf::uint64 value);

  // uint64 st_size = 8;
  void clear_st_size();
  static const int kStSizeFieldNumber = 8;
  ::google::protobuf::uint64 st_size() const;
  void set_st_size(::google::protobuf::uint64 value);

  // uint64 st_catime = 9;
  void clear_st_catime();
  static const int kStCatimeFieldNumber = 9;
  ::google::protobuf::uint64 st_catime() const;
  void set_st_catime(::google::protobuf::uint64 value);

  // uint64 st_cmtime = 10;
  void clear_st_cmtime();
  static const int kStCmtimeFieldNumber = 10;
  ::google::protobuf::uint64 st_cmtime() const;
  void set_st_cmtime(::google::protobuf::uint64 value);

  // uint64 st_cctime = 11;
  void clear_st_cctime();
  static const int kStCctimeFieldNumber = 11;
  ::google::protobuf::uint64 st_cctime() const;
  void set_st_cctime(::google::protobuf::uint64 value);

  // uint64 st_blksize = 12;
  void clear_st_blksize();
  static const int kStBlksizeFieldNumber = 12;
  ::google::protobuf::uint64 st_blksize() const;
  void set_st_blksize(::google::protobuf::uint64 value);

  // uint64 st_blocks = 13;
  void clear_st_blocks();
  static const int kStBlocksFieldNumber = 13;
  ::google::protobuf::uint64 st_blocks() const;
  void set_st_blocks(::google::protobuf::uint64 value);

  // uint64 st_attr = 14;
  void clear_st_attr();
  static const int kStAttrFieldNumber = 14;
  ::google::protobuf::uint64 st_attr() const;
  void set_st_attr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NfsProtocol.attributes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 st_dev_;
  ::google::protobuf::uint64 st_ino_;
  ::google::protobuf::uint64 st_mode_;
  ::google::protobuf::uint64 st_nlink_;
  ::google::protobuf::uint64 st_uid_;
  ::google::protobuf::uint64 st_gid_;
  ::google::protobuf::uint64 st_rdev_;
  ::google::protobuf::uint64 st_size_;
  ::google::protobuf::uint64 st_catime_;
  ::google::protobuf::uint64 st_cmtime_;
  ::google::protobuf::uint64 st_cctime_;
  ::google::protobuf::uint64 st_blksize_;
  ::google::protobuf::uint64 st_blocks_;
  ::google::protobuf::uint64 st_attr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class mkdir_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.mkdir_request) */ {
 public:
  mkdir_request();
  virtual ~mkdir_request();

  mkdir_request(const mkdir_request& from);

  inline mkdir_request& operator=(const mkdir_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  mkdir_request(mkdir_request&& from) noexcept
    : mkdir_request() {
    *this = ::std::move(from);
  }

  inline mkdir_request& operator=(mkdir_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const mkdir_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mkdir_request* internal_default_instance() {
    return reinterpret_cast<const mkdir_request*>(
               &_mkdir_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(mkdir_request* other);
  friend void swap(mkdir_request& a, mkdir_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline mkdir_request* New() const final {
    return CreateMaybeMessage<mkdir_request>(NULL);
  }

  mkdir_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<mkdir_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const mkdir_request& from);
  void MergeFrom(const mkdir_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mkdir_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dirfh = 1;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::std::string& dirfh() const;
  void set_dirfh(const ::std::string& value);
  #if LANG_CXX11
  void set_dirfh(::std::string&& value);
  #endif
  void set_dirfh(const char* value);
  void set_dirfh(const char* value, size_t size);
  ::std::string* mutable_dirfh();
  ::std::string* release_dirfh();
  void set_allocated_dirfh(::std::string* dirfh);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .NfsProtocol.attributes attr = 3;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 3;
  private:
  const ::NfsProtocol::attributes& _internal_attr() const;
  public:
  const ::NfsProtocol::attributes& attr() const;
  ::NfsProtocol::attributes* release_attr();
  ::NfsProtocol::attributes* mutable_attr();
  void set_allocated_attr(::NfsProtocol::attributes* attr);

  // @@protoc_insertion_point(class_scope:NfsProtocol.mkdir_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dirfh_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NfsProtocol::attributes* attr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class c_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.c_response) */ {
 public:
  c_response();
  virtual ~c_response();

  c_response(const c_response& from);

  inline c_response& operator=(const c_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c_response(c_response&& from) noexcept
    : c_response() {
    *this = ::std::move(from);
  }

  inline c_response& operator=(c_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const c_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c_response* internal_default_instance() {
    return reinterpret_cast<const c_response*>(
               &_c_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(c_response* other);
  friend void swap(c_response& a, c_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c_response* New() const final {
    return CreateMaybeMessage<c_response>(NULL);
  }

  c_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const c_response& from);
  void MergeFrom(const c_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(c_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  ::google::protobuf::uint64 success() const;
  void set_success(::google::protobuf::uint64 value);

  // uint64 ern = 2;
  void clear_ern();
  static const int kErnFieldNumber = 2;
  ::google::protobuf::uint64 ern() const;
  void set_ern(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NfsProtocol.c_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 success_;
  ::google::protobuf::uint64 ern_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rmdir_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.rmdir_request) */ {
 public:
  rmdir_request();
  virtual ~rmdir_request();

  rmdir_request(const rmdir_request& from);

  inline rmdir_request& operator=(const rmdir_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rmdir_request(rmdir_request&& from) noexcept
    : rmdir_request() {
    *this = ::std::move(from);
  }

  inline rmdir_request& operator=(rmdir_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rmdir_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rmdir_request* internal_default_instance() {
    return reinterpret_cast<const rmdir_request*>(
               &_rmdir_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(rmdir_request* other);
  friend void swap(rmdir_request& a, rmdir_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rmdir_request* New() const final {
    return CreateMaybeMessage<rmdir_request>(NULL);
  }

  rmdir_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rmdir_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rmdir_request& from);
  void MergeFrom(const rmdir_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rmdir_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dirfh = 1;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::std::string& dirfh() const;
  void set_dirfh(const ::std::string& value);
  #if LANG_CXX11
  void set_dirfh(::std::string&& value);
  #endif
  void set_dirfh(const char* value);
  void set_dirfh(const char* value, size_t size);
  ::std::string* mutable_dirfh();
  ::std::string* release_dirfh();
  void set_allocated_dirfh(::std::string* dirfh);

  // @@protoc_insertion_point(class_scope:NfsProtocol.rmdir_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dirfh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rename_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NfsProtocol.rename_request) */ {
 public:
  rename_request();
  virtual ~rename_request();

  rename_request(const rename_request& from);

  inline rename_request& operator=(const rename_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rename_request(rename_request&& from) noexcept
    : rename_request() {
    *this = ::std::move(from);
  }

  inline rename_request& operator=(rename_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const rename_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rename_request* internal_default_instance() {
    return reinterpret_cast<const rename_request*>(
               &_rename_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(rename_request* other);
  friend void swap(rename_request& a, rename_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rename_request* New() const final {
    return CreateMaybeMessage<rename_request>(NULL);
  }

  rename_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rename_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rename_request& from);
  void MergeFrom(const rename_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rename_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string todir = 1;
  void clear_todir();
  static const int kTodirFieldNumber = 1;
  const ::std::string& todir() const;
  void set_todir(const ::std::string& value);
  #if LANG_CXX11
  void set_todir(::std::string&& value);
  #endif
  void set_todir(const char* value);
  void set_todir(const char* value, size_t size);
  ::std::string* mutable_todir();
  ::std::string* release_todir();
  void set_allocated_todir(::std::string* todir);

  // string fromdir = 2;
  void clear_fromdir();
  static const int kFromdirFieldNumber = 2;
  const ::std::string& fromdir() const;
  void set_fromdir(const ::std::string& value);
  #if LANG_CXX11
  void set_fromdir(::std::string&& value);
  #endif
  void set_fromdir(const char* value);
  void set_fromdir(const char* value, size_t size);
  ::std::string* mutable_fromdir();
  ::std::string* release_fromdir();
  void set_allocated_fromdir(::std::string* fromdir);

  // @@protoc_insertion_point(class_scope:NfsProtocol.rename_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr todir_;
  ::google::protobuf::internal::ArenaStringPtr fromdir_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// attributes

// uint64 st_dev = 1;
inline void attributes::clear_st_dev() {
  st_dev_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_dev() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_dev)
  return st_dev_;
}
inline void attributes::set_st_dev(::google::protobuf::uint64 value) {
  
  st_dev_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_dev)
}

// uint64 st_ino = 2;
inline void attributes::clear_st_ino() {
  st_ino_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_ino() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_ino)
  return st_ino_;
}
inline void attributes::set_st_ino(::google::protobuf::uint64 value) {
  
  st_ino_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_ino)
}

// uint64 st_mode = 3;
inline void attributes::clear_st_mode() {
  st_mode_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_mode() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_mode)
  return st_mode_;
}
inline void attributes::set_st_mode(::google::protobuf::uint64 value) {
  
  st_mode_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_mode)
}

// uint64 st_nlink = 4;
inline void attributes::clear_st_nlink() {
  st_nlink_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_nlink() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_nlink)
  return st_nlink_;
}
inline void attributes::set_st_nlink(::google::protobuf::uint64 value) {
  
  st_nlink_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_nlink)
}

// uint64 st_uid = 5;
inline void attributes::clear_st_uid() {
  st_uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_uid() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_uid)
  return st_uid_;
}
inline void attributes::set_st_uid(::google::protobuf::uint64 value) {
  
  st_uid_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_uid)
}

// uint64 st_gid = 6;
inline void attributes::clear_st_gid() {
  st_gid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_gid() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_gid)
  return st_gid_;
}
inline void attributes::set_st_gid(::google::protobuf::uint64 value) {
  
  st_gid_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_gid)
}

// uint64 st_rdev = 7;
inline void attributes::clear_st_rdev() {
  st_rdev_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_rdev() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_rdev)
  return st_rdev_;
}
inline void attributes::set_st_rdev(::google::protobuf::uint64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_rdev)
}

// uint64 st_size = 8;
inline void attributes::clear_st_size() {
  st_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_size() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_size)
  return st_size_;
}
inline void attributes::set_st_size(::google::protobuf::uint64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_size)
}

// uint64 st_catime = 9;
inline void attributes::clear_st_catime() {
  st_catime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_catime() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_catime)
  return st_catime_;
}
inline void attributes::set_st_catime(::google::protobuf::uint64 value) {
  
  st_catime_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_catime)
}

// uint64 st_cmtime = 10;
inline void attributes::clear_st_cmtime() {
  st_cmtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_cmtime() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_cmtime)
  return st_cmtime_;
}
inline void attributes::set_st_cmtime(::google::protobuf::uint64 value) {
  
  st_cmtime_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_cmtime)
}

// uint64 st_cctime = 11;
inline void attributes::clear_st_cctime() {
  st_cctime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_cctime() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_cctime)
  return st_cctime_;
}
inline void attributes::set_st_cctime(::google::protobuf::uint64 value) {
  
  st_cctime_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_cctime)
}

// uint64 st_blksize = 12;
inline void attributes::clear_st_blksize() {
  st_blksize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_blksize() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_blksize)
  return st_blksize_;
}
inline void attributes::set_st_blksize(::google::protobuf::uint64 value) {
  
  st_blksize_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_blksize)
}

// uint64 st_blocks = 13;
inline void attributes::clear_st_blocks() {
  st_blocks_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_blocks() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_blocks)
  return st_blocks_;
}
inline void attributes::set_st_blocks(::google::protobuf::uint64 value) {
  
  st_blocks_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_blocks)
}

// uint64 st_attr = 14;
inline void attributes::clear_st_attr() {
  st_attr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 attributes::st_attr() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.attributes.st_attr)
  return st_attr_;
}
inline void attributes::set_st_attr(::google::protobuf::uint64 value) {
  
  st_attr_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.attributes.st_attr)
}

// -------------------------------------------------------------------

// mkdir_request

// string dirfh = 1;
inline void mkdir_request::clear_dirfh() {
  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mkdir_request::dirfh() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.dirfh)
  return dirfh_.GetNoArena();
}
inline void mkdir_request::set_dirfh(const ::std::string& value) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.mkdir_request.dirfh)
}
#if LANG_CXX11
inline void mkdir_request::set_dirfh(::std::string&& value) {
  
  dirfh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.mkdir_request.dirfh)
}
#endif
inline void mkdir_request::set_dirfh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.mkdir_request.dirfh)
}
inline void mkdir_request::set_dirfh(const char* value, size_t size) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.mkdir_request.dirfh)
}
inline ::std::string* mkdir_request::mutable_dirfh() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.dirfh)
  return dirfh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mkdir_request::release_dirfh() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.dirfh)
  
  return dirfh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mkdir_request::set_allocated_dirfh(::std::string* dirfh) {
  if (dirfh != NULL) {
    
  } else {
    
  }
  dirfh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dirfh);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.dirfh)
}

// string name = 2;
inline void mkdir_request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& mkdir_request::name() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.name)
  return name_.GetNoArena();
}
inline void mkdir_request::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.mkdir_request.name)
}
#if LANG_CXX11
inline void mkdir_request::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.mkdir_request.name)
}
#endif
inline void mkdir_request::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.mkdir_request.name)
}
inline void mkdir_request::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.mkdir_request.name)
}
inline ::std::string* mkdir_request::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* mkdir_request::release_name() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void mkdir_request::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.name)
}

// .NfsProtocol.attributes attr = 3;
inline bool mkdir_request::has_attr() const {
  return this != internal_default_instance() && attr_ != NULL;
}
inline void mkdir_request::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
}
inline const ::NfsProtocol::attributes& mkdir_request::_internal_attr() const {
  return *attr_;
}
inline const ::NfsProtocol::attributes& mkdir_request::attr() const {
  const ::NfsProtocol::attributes* p = attr_;
  // @@protoc_insertion_point(field_get:NfsProtocol.mkdir_request.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::NfsProtocol::attributes*>(
      &::NfsProtocol::_attributes_default_instance_);
}
inline ::NfsProtocol::attributes* mkdir_request::release_attr() {
  // @@protoc_insertion_point(field_release:NfsProtocol.mkdir_request.attr)
  
  ::NfsProtocol::attributes* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::NfsProtocol::attributes* mkdir_request::mutable_attr() {
  
  if (attr_ == NULL) {
    auto* p = CreateMaybeMessage<::NfsProtocol::attributes>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NfsProtocol.mkdir_request.attr)
  return attr_;
}
inline void mkdir_request::set_allocated_attr(::NfsProtocol::attributes* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr_;
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.mkdir_request.attr)
}

// -------------------------------------------------------------------

// c_response

// uint64 success = 1;
inline void c_response::clear_success() {
  success_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 c_response::success() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.c_response.success)
  return success_;
}
inline void c_response::set_success(::google::protobuf::uint64 value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.c_response.success)
}

// uint64 ern = 2;
inline void c_response::clear_ern() {
  ern_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 c_response::ern() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.c_response.ern)
  return ern_;
}
inline void c_response::set_ern(::google::protobuf::uint64 value) {
  
  ern_ = value;
  // @@protoc_insertion_point(field_set:NfsProtocol.c_response.ern)
}

// -------------------------------------------------------------------

// rmdir_request

// string dirfh = 1;
inline void rmdir_request::clear_dirfh() {
  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rmdir_request::dirfh() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.rmdir_request.dirfh)
  return dirfh_.GetNoArena();
}
inline void rmdir_request::set_dirfh(const ::std::string& value) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.rmdir_request.dirfh)
}
#if LANG_CXX11
inline void rmdir_request::set_dirfh(::std::string&& value) {
  
  dirfh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.rmdir_request.dirfh)
}
#endif
inline void rmdir_request::set_dirfh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.rmdir_request.dirfh)
}
inline void rmdir_request::set_dirfh(const char* value, size_t size) {
  
  dirfh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.rmdir_request.dirfh)
}
inline ::std::string* rmdir_request::mutable_dirfh() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.rmdir_request.dirfh)
  return dirfh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rmdir_request::release_dirfh() {
  // @@protoc_insertion_point(field_release:NfsProtocol.rmdir_request.dirfh)
  
  return dirfh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rmdir_request::set_allocated_dirfh(::std::string* dirfh) {
  if (dirfh != NULL) {
    
  } else {
    
  }
  dirfh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dirfh);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.rmdir_request.dirfh)
}

// -------------------------------------------------------------------

// rename_request

// string todir = 1;
inline void rename_request::clear_todir() {
  todir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rename_request::todir() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.rename_request.todir)
  return todir_.GetNoArena();
}
inline void rename_request::set_todir(const ::std::string& value) {
  
  todir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.rename_request.todir)
}
#if LANG_CXX11
inline void rename_request::set_todir(::std::string&& value) {
  
  todir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.rename_request.todir)
}
#endif
inline void rename_request::set_todir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  todir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.rename_request.todir)
}
inline void rename_request::set_todir(const char* value, size_t size) {
  
  todir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.rename_request.todir)
}
inline ::std::string* rename_request::mutable_todir() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.rename_request.todir)
  return todir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_request::release_todir() {
  // @@protoc_insertion_point(field_release:NfsProtocol.rename_request.todir)
  
  return todir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_request::set_allocated_todir(::std::string* todir) {
  if (todir != NULL) {
    
  } else {
    
  }
  todir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todir);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.rename_request.todir)
}

// string fromdir = 2;
inline void rename_request::clear_fromdir() {
  fromdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& rename_request::fromdir() const {
  // @@protoc_insertion_point(field_get:NfsProtocol.rename_request.fromdir)
  return fromdir_.GetNoArena();
}
inline void rename_request::set_fromdir(const ::std::string& value) {
  
  fromdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfsProtocol.rename_request.fromdir)
}
#if LANG_CXX11
inline void rename_request::set_fromdir(::std::string&& value) {
  
  fromdir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfsProtocol.rename_request.fromdir)
}
#endif
inline void rename_request::set_fromdir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fromdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfsProtocol.rename_request.fromdir)
}
inline void rename_request::set_fromdir(const char* value, size_t size) {
  
  fromdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfsProtocol.rename_request.fromdir)
}
inline ::std::string* rename_request::mutable_fromdir() {
  
  // @@protoc_insertion_point(field_mutable:NfsProtocol.rename_request.fromdir)
  return fromdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rename_request::release_fromdir() {
  // @@protoc_insertion_point(field_release:NfsProtocol.rename_request.fromdir)
  
  return fromdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rename_request::set_allocated_fromdir(::std::string* fromdir) {
  if (fromdir != NULL) {
    
  } else {
    
  }
  fromdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromdir);
  // @@protoc_insertion_point(field_set_allocated:NfsProtocol.rename_request.fromdir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NfsProtocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_schema_2eproto
