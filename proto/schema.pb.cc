// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_attributes;
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {
class attributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<attributes>
      _instance;
} _attributes_default_instance_;
class mkdir_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mkdir_request>
      _instance;
} _mkdir_request_default_instance_;
class mkdir_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mkdir_response>
      _instance;
} _mkdir_response_default_instance_;
}  // namespace NfsProtocol
namespace protobuf_schema_2eproto {
static void InitDefaultsattributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_attributes_default_instance_;
    new (ptr) ::NfsProtocol::attributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::attributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_attributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsattributes}, {}};

static void InitDefaultsmkdir_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_mkdir_request_default_instance_;
    new (ptr) ::NfsProtocol::mkdir_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::mkdir_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mkdir_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmkdir_request}, {
      &protobuf_schema_2eproto::scc_info_attributes.base,}};

static void InitDefaultsmkdir_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_mkdir_response_default_instance_;
    new (ptr) ::NfsProtocol::mkdir_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::mkdir_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mkdir_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmkdir_response}, {
      &protobuf_schema_2eproto::scc_info_attributes.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_attributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mkdir_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mkdir_response.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, d_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, dirfh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, attr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_response, fh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_response, attr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NfsProtocol::attributes)},
  { 9, -1, sizeof(::NfsProtocol::mkdir_request)},
  { 17, -1, sizeof(::NfsProtocol::mkdir_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_attributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_mkdir_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_mkdir_response_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\013NfsProtocol\"8\n\nattribute"
      "s\022\t\n\001a\030\001 \001(\004\022\t\n\001b\030\002 \001(\004\022\t\n\001c\030\003 \001(\004\022\t\n\001d\030"
      "\004 \001(\004\"S\n\rmkdir_request\022\r\n\005dirfh\030\001 \001(\t\022\014\n"
      "\004name\030\002 \001(\t\022%\n\004attr\030\003 \001(\0132\027.NfsProtocol."
      "attributes\"C\n\016mkdir_response\022\n\n\002fh\030\001 \001(\t"
      "\022%\n\004attr\030\002 \001(\0132\027.NfsProtocol.attributes2"
      "O\n\tNfsServer\022B\n\005mkdir\022\032.NfsProtocol.mkdi"
      "r_request\032\033.NfsProtocol.mkdir_response\"\000"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {

// ===================================================================

void attributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int attributes::kAFieldNumber;
const int attributes::kBFieldNumber;
const int attributes::kCFieldNumber;
const int attributes::kDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

attributes::attributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_attributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.attributes)
}
attributes::attributes(const attributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&a_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.attributes)
}

void attributes::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&a_)) + sizeof(d_));
}

attributes::~attributes() {
  // @@protoc_insertion_point(destructor:NfsProtocol.attributes)
  SharedDtor();
}

void attributes::SharedDtor() {
}

void attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* attributes::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const attributes& attributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_attributes.base);
  return *internal_default_instance();
}


void attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&a_)) + sizeof(d_));
  _internal_metadata_.Clear();
}

bool attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.attributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.attributes)
  return false;
#undef DO_
}

void attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->a(), output);
  }

  // uint64 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->b(), output);
  }

  // uint64 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->c(), output);
  }

  // uint64 d = 4;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.attributes)
}

::google::protobuf::uint8* attributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->a(), target);
  }

  // uint64 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->b(), target);
  }

  // uint64 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->c(), target);
  }

  // uint64 d = 4;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->d(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.attributes)
  return target;
}

size_t attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.attributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->a());
  }

  // uint64 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->b());
  }

  // uint64 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->c());
  }

  // uint64 d = 4;
  if (this->d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->d());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void attributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const attributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const attributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.attributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.attributes)
    MergeFrom(*source);
  }
}

void attributes::MergeFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
}

void attributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attributes::CopyFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool attributes::IsInitialized() const {
  return true;
}

void attributes::Swap(attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void attributes::InternalSwap(attributes* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata attributes::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mkdir_request::InitAsDefaultInstance() {
  ::NfsProtocol::_mkdir_request_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NfsProtocol::attributes*>(
      ::NfsProtocol::attributes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mkdir_request::kDirfhFieldNumber;
const int mkdir_request::kNameFieldNumber;
const int mkdir_request::kAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mkdir_request::mkdir_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_mkdir_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.mkdir_request)
}
mkdir_request::mkdir_request(const mkdir_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dirfh().size() > 0) {
    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attr()) {
    attr_ = new ::NfsProtocol::attributes(*from.attr_);
  } else {
    attr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.mkdir_request)
}

void mkdir_request::SharedCtor() {
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_ = NULL;
}

mkdir_request::~mkdir_request() {
  // @@protoc_insertion_point(destructor:NfsProtocol.mkdir_request)
  SharedDtor();
}

void mkdir_request::SharedDtor() {
  dirfh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attr_;
}

void mkdir_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mkdir_request::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mkdir_request& mkdir_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_mkdir_request.base);
  return *internal_default_instance();
}


void mkdir_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
  _internal_metadata_.Clear();
}

bool mkdir_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.mkdir_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dirfh = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirfh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dirfh().data(), static_cast<int>(this->dirfh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.mkdir_request.dirfh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.mkdir_request.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NfsProtocol.attributes attr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.mkdir_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.mkdir_request)
  return false;
#undef DO_
}

void mkdir_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.dirfh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirfh(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_attr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.mkdir_request)
}

::google::protobuf::uint8* mkdir_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.dirfh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirfh(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_attr(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.mkdir_request)
  return target;
}

size_t mkdir_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.mkdir_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dirfh());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mkdir_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.mkdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  const mkdir_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mkdir_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.mkdir_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.mkdir_request)
    MergeFrom(*source);
  }
}

void mkdir_request::MergeFrom(const mkdir_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.mkdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dirfh().size() > 0) {

    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attr()) {
    mutable_attr()->::NfsProtocol::attributes::MergeFrom(from.attr());
  }
}

void mkdir_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.mkdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mkdir_request::CopyFrom(const mkdir_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.mkdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdir_request::IsInitialized() const {
  return true;
}

void mkdir_request::Swap(mkdir_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mkdir_request::InternalSwap(mkdir_request* other) {
  using std::swap;
  dirfh_.Swap(&other->dirfh_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attr_, other->attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mkdir_request::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mkdir_response::InitAsDefaultInstance() {
  ::NfsProtocol::_mkdir_response_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NfsProtocol::attributes*>(
      ::NfsProtocol::attributes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mkdir_response::kFhFieldNumber;
const int mkdir_response::kAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mkdir_response::mkdir_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_mkdir_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.mkdir_response)
}
mkdir_response::mkdir_response(const mkdir_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fh().size() > 0) {
    fh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fh_);
  }
  if (from.has_attr()) {
    attr_ = new ::NfsProtocol::attributes(*from.attr_);
  } else {
    attr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.mkdir_response)
}

void mkdir_response::SharedCtor() {
  fh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_ = NULL;
}

mkdir_response::~mkdir_response() {
  // @@protoc_insertion_point(destructor:NfsProtocol.mkdir_response)
  SharedDtor();
}

void mkdir_response::SharedDtor() {
  fh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attr_;
}

void mkdir_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mkdir_response::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mkdir_response& mkdir_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_mkdir_response.base);
  return *internal_default_instance();
}


void mkdir_response::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.mkdir_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
  _internal_metadata_.Clear();
}

bool mkdir_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.mkdir_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fh = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fh().data(), static_cast<int>(this->fh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.mkdir_response.fh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NfsProtocol.attributes attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.mkdir_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.mkdir_response)
  return false;
#undef DO_
}

void mkdir_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.mkdir_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fh = 1;
  if (this->fh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fh().data(), static_cast<int>(this->fh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_response.fh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fh(), output);
  }

  // .NfsProtocol.attributes attr = 2;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_attr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.mkdir_response)
}

::google::protobuf::uint8* mkdir_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.mkdir_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fh = 1;
  if (this->fh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fh().data(), static_cast<int>(this->fh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_response.fh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fh(), target);
  }

  // .NfsProtocol.attributes attr = 2;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_attr(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.mkdir_response)
  return target;
}

size_t mkdir_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.mkdir_response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string fh = 1;
  if (this->fh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fh());
  }

  // .NfsProtocol.attributes attr = 2;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mkdir_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.mkdir_response)
  GOOGLE_DCHECK_NE(&from, this);
  const mkdir_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mkdir_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.mkdir_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.mkdir_response)
    MergeFrom(*source);
  }
}

void mkdir_response::MergeFrom(const mkdir_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.mkdir_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fh().size() > 0) {

    fh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fh_);
  }
  if (from.has_attr()) {
    mutable_attr()->::NfsProtocol::attributes::MergeFrom(from.attr());
  }
}

void mkdir_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.mkdir_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mkdir_response::CopyFrom(const mkdir_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.mkdir_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdir_response::IsInitialized() const {
  return true;
}

void mkdir_response::Swap(mkdir_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mkdir_response::InternalSwap(mkdir_response* other) {
  using std::swap;
  fh_.Swap(&other->fh_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attr_, other->attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mkdir_response::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NfsProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::attributes* Arena::CreateMaybeMessage< ::NfsProtocol::attributes >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::attributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::mkdir_request* Arena::CreateMaybeMessage< ::NfsProtocol::mkdir_request >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::mkdir_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::mkdir_response* Arena::CreateMaybeMessage< ::NfsProtocol::mkdir_response >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::mkdir_response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
