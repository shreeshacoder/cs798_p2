// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_attributes;
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {
class attributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<attributes>
      _instance;
} _attributes_default_instance_;
class mkdir_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<mkdir_request>
      _instance;
} _mkdir_request_default_instance_;
class c_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c_response>
      _instance;
} _c_response_default_instance_;
class rmdir_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rmdir_request>
      _instance;
} _rmdir_request_default_instance_;
class rename_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rename_request>
      _instance;
} _rename_request_default_instance_;
}  // namespace NfsProtocol
namespace protobuf_schema_2eproto {
static void InitDefaultsattributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_attributes_default_instance_;
    new (ptr) ::NfsProtocol::attributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::attributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_attributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsattributes}, {}};

static void InitDefaultsmkdir_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_mkdir_request_default_instance_;
    new (ptr) ::NfsProtocol::mkdir_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::mkdir_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_mkdir_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmkdir_request}, {
      &protobuf_schema_2eproto::scc_info_attributes.base,}};

static void InitDefaultsc_response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_c_response_default_instance_;
    new (ptr) ::NfsProtocol::c_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::c_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c_response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc_response}, {}};

static void InitDefaultsrmdir_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_rmdir_request_default_instance_;
    new (ptr) ::NfsProtocol::rmdir_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::rmdir_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rmdir_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrmdir_request}, {}};

static void InitDefaultsrename_request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NfsProtocol::_rename_request_default_instance_;
    new (ptr) ::NfsProtocol::rename_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NfsProtocol::rename_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rename_request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrename_request}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_attributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_mkdir_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_c_response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rmdir_request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rename_request.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_ino_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_nlink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_rdev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_catime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_cmtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_cctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_blksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_blocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::attributes, st_attr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, dirfh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::mkdir_request, attr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::c_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::c_response, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::c_response, ern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::rmdir_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::rmdir_request, dirfh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::rename_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::rename_request, todir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NfsProtocol::rename_request, fromdir_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NfsProtocol::attributes)},
  { 19, -1, sizeof(::NfsProtocol::mkdir_request)},
  { 27, -1, sizeof(::NfsProtocol::c_response)},
  { 34, -1, sizeof(::NfsProtocol::rmdir_request)},
  { 40, -1, sizeof(::NfsProtocol::rename_request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_attributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_mkdir_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_c_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_rmdir_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NfsProtocol::_rename_request_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\013NfsProtocol\"\202\002\n\nattribut"
      "es\022\016\n\006st_dev\030\001 \001(\004\022\016\n\006st_ino\030\002 \001(\004\022\017\n\007st"
      "_mode\030\003 \001(\004\022\020\n\010st_nlink\030\004 \001(\004\022\016\n\006st_uid\030"
      "\005 \001(\004\022\016\n\006st_gid\030\006 \001(\004\022\017\n\007st_rdev\030\007 \001(\004\022\017"
      "\n\007st_size\030\010 \001(\004\022\021\n\tst_catime\030\t \001(\004\022\021\n\tst"
      "_cmtime\030\n \001(\004\022\021\n\tst_cctime\030\013 \001(\004\022\022\n\nst_b"
      "lksize\030\014 \001(\004\022\021\n\tst_blocks\030\r \001(\004\022\017\n\007st_at"
      "tr\030\016 \001(\004\"S\n\rmkdir_request\022\r\n\005dirfh\030\001 \001(\t"
      "\022\014\n\004name\030\002 \001(\t\022%\n\004attr\030\003 \001(\0132\027.NfsProtoc"
      "ol.attributes\"*\n\nc_response\022\017\n\007success\030\001"
      " \001(\004\022\013\n\003ern\030\002 \001(\004\"\036\n\rrmdir_request\022\r\n\005di"
      "rfh\030\001 \001(\t\"0\n\016rename_request\022\r\n\005todir\030\001 \001"
      "(\t\022\017\n\007fromdir\030\002 \001(\t2\342\001\n\tNfsServer\022E\n\014ser"
      "ver_mkdir\022\032.NfsProtocol.mkdir_request\032\027."
      "NfsProtocol.c_response\"\000\022E\n\014server_rmdir"
      "\022\032.NfsProtocol.rmdir_request\032\027.NfsProtoc"
      "ol.c_response\"\000\022G\n\rserver_rename\022\033.NfsPr"
      "otocol.rename_request\032\027.NfsProtocol.c_re"
      "sponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace NfsProtocol {

// ===================================================================

void attributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int attributes::kStDevFieldNumber;
const int attributes::kStInoFieldNumber;
const int attributes::kStModeFieldNumber;
const int attributes::kStNlinkFieldNumber;
const int attributes::kStUidFieldNumber;
const int attributes::kStGidFieldNumber;
const int attributes::kStRdevFieldNumber;
const int attributes::kStSizeFieldNumber;
const int attributes::kStCatimeFieldNumber;
const int attributes::kStCmtimeFieldNumber;
const int attributes::kStCctimeFieldNumber;
const int attributes::kStBlksizeFieldNumber;
const int attributes::kStBlocksFieldNumber;
const int attributes::kStAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

attributes::attributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_attributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.attributes)
}
attributes::attributes(const attributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&st_dev_, &from.st_dev_,
    static_cast<size_t>(reinterpret_cast<char*>(&st_attr_) -
    reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.attributes)
}

void attributes::SharedCtor() {
  ::memset(&st_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_attr_) -
      reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
}

attributes::~attributes() {
  // @@protoc_insertion_point(destructor:NfsProtocol.attributes)
  SharedDtor();
}

void attributes::SharedDtor() {
}

void attributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* attributes::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const attributes& attributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_attributes.base);
  return *internal_default_instance();
}


void attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&st_dev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_attr_) -
      reinterpret_cast<char*>(&st_dev_)) + sizeof(st_attr_));
  _internal_metadata_.Clear();
}

bool attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.attributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 st_dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_ino = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_ino_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_nlink = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_nlink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_gid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_rdev = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_rdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_catime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_catime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_cmtime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_cmtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_cctime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_cctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_blksize = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_blksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_blocks = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 st_attr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &st_attr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.attributes)
  return false;
#undef DO_
}

void attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->st_dev(), output);
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->st_ino(), output);
  }

  // uint64 st_mode = 3;
  if (this->st_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->st_mode(), output);
  }

  // uint64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->st_nlink(), output);
  }

  // uint64 st_uid = 5;
  if (this->st_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->st_uid(), output);
  }

  // uint64 st_gid = 6;
  if (this->st_gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->st_gid(), output);
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->st_rdev(), output);
  }

  // uint64 st_size = 8;
  if (this->st_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->st_size(), output);
  }

  // uint64 st_catime = 9;
  if (this->st_catime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->st_catime(), output);
  }

  // uint64 st_cmtime = 10;
  if (this->st_cmtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->st_cmtime(), output);
  }

  // uint64 st_cctime = 11;
  if (this->st_cctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->st_cctime(), output);
  }

  // uint64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->st_blksize(), output);
  }

  // uint64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->st_blocks(), output);
  }

  // uint64 st_attr = 14;
  if (this->st_attr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->st_attr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.attributes)
}

::google::protobuf::uint8* attributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->st_dev(), target);
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->st_ino(), target);
  }

  // uint64 st_mode = 3;
  if (this->st_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->st_mode(), target);
  }

  // uint64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->st_nlink(), target);
  }

  // uint64 st_uid = 5;
  if (this->st_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->st_uid(), target);
  }

  // uint64 st_gid = 6;
  if (this->st_gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->st_gid(), target);
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->st_rdev(), target);
  }

  // uint64 st_size = 8;
  if (this->st_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->st_size(), target);
  }

  // uint64 st_catime = 9;
  if (this->st_catime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->st_catime(), target);
  }

  // uint64 st_cmtime = 10;
  if (this->st_cmtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->st_cmtime(), target);
  }

  // uint64 st_cctime = 11;
  if (this->st_cctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->st_cctime(), target);
  }

  // uint64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->st_blksize(), target);
  }

  // uint64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->st_blocks(), target);
  }

  // uint64 st_attr = 14;
  if (this->st_attr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->st_attr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.attributes)
  return target;
}

size_t attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.attributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 st_dev = 1;
  if (this->st_dev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_dev());
  }

  // uint64 st_ino = 2;
  if (this->st_ino() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_ino());
  }

  // uint64 st_mode = 3;
  if (this->st_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_mode());
  }

  // uint64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_nlink());
  }

  // uint64 st_uid = 5;
  if (this->st_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_uid());
  }

  // uint64 st_gid = 6;
  if (this->st_gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_gid());
  }

  // uint64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_rdev());
  }

  // uint64 st_size = 8;
  if (this->st_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_size());
  }

  // uint64 st_catime = 9;
  if (this->st_catime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_catime());
  }

  // uint64 st_cmtime = 10;
  if (this->st_cmtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_cmtime());
  }

  // uint64 st_cctime = 11;
  if (this->st_cctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_cctime());
  }

  // uint64 st_blksize = 12;
  if (this->st_blksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_blksize());
  }

  // uint64 st_blocks = 13;
  if (this->st_blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_blocks());
  }

  // uint64 st_attr = 14;
  if (this->st_attr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->st_attr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void attributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const attributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const attributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.attributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.attributes)
    MergeFrom(*source);
  }
}

void attributes::MergeFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.st_dev() != 0) {
    set_st_dev(from.st_dev());
  }
  if (from.st_ino() != 0) {
    set_st_ino(from.st_ino());
  }
  if (from.st_mode() != 0) {
    set_st_mode(from.st_mode());
  }
  if (from.st_nlink() != 0) {
    set_st_nlink(from.st_nlink());
  }
  if (from.st_uid() != 0) {
    set_st_uid(from.st_uid());
  }
  if (from.st_gid() != 0) {
    set_st_gid(from.st_gid());
  }
  if (from.st_rdev() != 0) {
    set_st_rdev(from.st_rdev());
  }
  if (from.st_size() != 0) {
    set_st_size(from.st_size());
  }
  if (from.st_catime() != 0) {
    set_st_catime(from.st_catime());
  }
  if (from.st_cmtime() != 0) {
    set_st_cmtime(from.st_cmtime());
  }
  if (from.st_cctime() != 0) {
    set_st_cctime(from.st_cctime());
  }
  if (from.st_blksize() != 0) {
    set_st_blksize(from.st_blksize());
  }
  if (from.st_blocks() != 0) {
    set_st_blocks(from.st_blocks());
  }
  if (from.st_attr() != 0) {
    set_st_attr(from.st_attr());
  }
}

void attributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attributes::CopyFrom(const attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool attributes::IsInitialized() const {
  return true;
}

void attributes::Swap(attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void attributes::InternalSwap(attributes* other) {
  using std::swap;
  swap(st_dev_, other->st_dev_);
  swap(st_ino_, other->st_ino_);
  swap(st_mode_, other->st_mode_);
  swap(st_nlink_, other->st_nlink_);
  swap(st_uid_, other->st_uid_);
  swap(st_gid_, other->st_gid_);
  swap(st_rdev_, other->st_rdev_);
  swap(st_size_, other->st_size_);
  swap(st_catime_, other->st_catime_);
  swap(st_cmtime_, other->st_cmtime_);
  swap(st_cctime_, other->st_cctime_);
  swap(st_blksize_, other->st_blksize_);
  swap(st_blocks_, other->st_blocks_);
  swap(st_attr_, other->st_attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata attributes::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void mkdir_request::InitAsDefaultInstance() {
  ::NfsProtocol::_mkdir_request_default_instance_._instance.get_mutable()->attr_ = const_cast< ::NfsProtocol::attributes*>(
      ::NfsProtocol::attributes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mkdir_request::kDirfhFieldNumber;
const int mkdir_request::kNameFieldNumber;
const int mkdir_request::kAttrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mkdir_request::mkdir_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_mkdir_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.mkdir_request)
}
mkdir_request::mkdir_request(const mkdir_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dirfh().size() > 0) {
    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attr()) {
    attr_ = new ::NfsProtocol::attributes(*from.attr_);
  } else {
    attr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.mkdir_request)
}

void mkdir_request::SharedCtor() {
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_ = NULL;
}

mkdir_request::~mkdir_request() {
  // @@protoc_insertion_point(destructor:NfsProtocol.mkdir_request)
  SharedDtor();
}

void mkdir_request::SharedDtor() {
  dirfh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attr_;
}

void mkdir_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* mkdir_request::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mkdir_request& mkdir_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_mkdir_request.base);
  return *internal_default_instance();
}


void mkdir_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
  _internal_metadata_.Clear();
}

bool mkdir_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.mkdir_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dirfh = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirfh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dirfh().data(), static_cast<int>(this->dirfh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.mkdir_request.dirfh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.mkdir_request.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NfsProtocol.attributes attr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.mkdir_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.mkdir_request)
  return false;
#undef DO_
}

void mkdir_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.dirfh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirfh(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_attr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.mkdir_request)
}

::google::protobuf::uint8* mkdir_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.mkdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.dirfh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirfh(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.mkdir_request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_attr(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.mkdir_request)
  return target;
}

size_t mkdir_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.mkdir_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dirfh());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .NfsProtocol.attributes attr = 3;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mkdir_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.mkdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  const mkdir_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mkdir_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.mkdir_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.mkdir_request)
    MergeFrom(*source);
  }
}

void mkdir_request::MergeFrom(const mkdir_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.mkdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dirfh().size() > 0) {

    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_attr()) {
    mutable_attr()->::NfsProtocol::attributes::MergeFrom(from.attr());
  }
}

void mkdir_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.mkdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mkdir_request::CopyFrom(const mkdir_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.mkdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdir_request::IsInitialized() const {
  return true;
}

void mkdir_request::Swap(mkdir_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mkdir_request::InternalSwap(mkdir_request* other) {
  using std::swap;
  dirfh_.Swap(&other->dirfh_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attr_, other->attr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata mkdir_request::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void c_response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c_response::kSuccessFieldNumber;
const int c_response::kErnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c_response::c_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_c_response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.c_response)
}
c_response::c_response(const c_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&ern_) -
    reinterpret_cast<char*>(&success_)) + sizeof(ern_));
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.c_response)
}

void c_response::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ern_) -
      reinterpret_cast<char*>(&success_)) + sizeof(ern_));
}

c_response::~c_response() {
  // @@protoc_insertion_point(destructor:NfsProtocol.c_response)
  SharedDtor();
}

void c_response::SharedDtor() {
}

void c_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* c_response::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const c_response& c_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_c_response.base);
  return *internal_default_instance();
}


void c_response::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.c_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ern_) -
      reinterpret_cast<char*>(&success_)) + sizeof(ern_));
  _internal_metadata_.Clear();
}

bool c_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.c_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ern = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.c_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.c_response)
  return false;
#undef DO_
}

void c_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.c_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->success(), output);
  }

  // uint64 ern = 2;
  if (this->ern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ern(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.c_response)
}

::google::protobuf::uint8* c_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.c_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->success(), target);
  }

  // uint64 ern = 2;
  if (this->ern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ern(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.c_response)
  return target;
}

size_t c_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.c_response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 success = 1;
  if (this->success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->success());
  }

  // uint64 ern = 2;
  if (this->ern() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ern());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.c_response)
  GOOGLE_DCHECK_NE(&from, this);
  const c_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const c_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.c_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.c_response)
    MergeFrom(*source);
  }
}

void c_response::MergeFrom(const c_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.c_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.ern() != 0) {
    set_ern(from.ern());
  }
}

void c_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.c_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_response::CopyFrom(const c_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.c_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_response::IsInitialized() const {
  return true;
}

void c_response::Swap(c_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c_response::InternalSwap(c_response* other) {
  using std::swap;
  swap(success_, other->success_);
  swap(ern_, other->ern_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata c_response::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rmdir_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rmdir_request::kDirfhFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rmdir_request::rmdir_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_rmdir_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.rmdir_request)
}
rmdir_request::rmdir_request(const rmdir_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dirfh().size() > 0) {
    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.rmdir_request)
}

void rmdir_request::SharedCtor() {
  dirfh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rmdir_request::~rmdir_request() {
  // @@protoc_insertion_point(destructor:NfsProtocol.rmdir_request)
  SharedDtor();
}

void rmdir_request::SharedDtor() {
  dirfh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rmdir_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rmdir_request::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rmdir_request& rmdir_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_rmdir_request.base);
  return *internal_default_instance();
}


void rmdir_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.rmdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirfh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool rmdir_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.rmdir_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dirfh = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirfh()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dirfh().data(), static_cast<int>(this->dirfh().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.rmdir_request.dirfh"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.rmdir_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.rmdir_request)
  return false;
#undef DO_
}

void rmdir_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.rmdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rmdir_request.dirfh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dirfh(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.rmdir_request)
}

::google::protobuf::uint8* rmdir_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.rmdir_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dirfh().data(), static_cast<int>(this->dirfh().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rmdir_request.dirfh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dirfh(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.rmdir_request)
  return target;
}

size_t rmdir_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.rmdir_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dirfh = 1;
  if (this->dirfh().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dirfh());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rmdir_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.rmdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  const rmdir_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rmdir_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.rmdir_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.rmdir_request)
    MergeFrom(*source);
  }
}

void rmdir_request::MergeFrom(const rmdir_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.rmdir_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dirfh().size() > 0) {

    dirfh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dirfh_);
  }
}

void rmdir_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.rmdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rmdir_request::CopyFrom(const rmdir_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.rmdir_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rmdir_request::IsInitialized() const {
  return true;
}

void rmdir_request::Swap(rmdir_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rmdir_request::InternalSwap(rmdir_request* other) {
  using std::swap;
  dirfh_.Swap(&other->dirfh_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rmdir_request::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void rename_request::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rename_request::kTodirFieldNumber;
const int rename_request::kFromdirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rename_request::rename_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_rename_request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NfsProtocol.rename_request)
}
rename_request::rename_request(const rename_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  todir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.todir().size() > 0) {
    todir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.todir_);
  }
  fromdir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fromdir().size() > 0) {
    fromdir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromdir_);
  }
  // @@protoc_insertion_point(copy_constructor:NfsProtocol.rename_request)
}

void rename_request::SharedCtor() {
  todir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

rename_request::~rename_request() {
  // @@protoc_insertion_point(destructor:NfsProtocol.rename_request)
  SharedDtor();
}

void rename_request::SharedDtor() {
  todir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rename_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* rename_request::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rename_request& rename_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_rename_request.base);
  return *internal_default_instance();
}


void rename_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NfsProtocol.rename_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  todir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool rename_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NfsProtocol.rename_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string todir = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->todir().data(), static_cast<int>(this->todir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.rename_request.todir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fromdir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromdir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromdir().data(), static_cast<int>(this->fromdir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NfsProtocol.rename_request.fromdir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NfsProtocol.rename_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NfsProtocol.rename_request)
  return false;
#undef DO_
}

void rename_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NfsProtocol.rename_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string todir = 1;
  if (this->todir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todir().data(), static_cast<int>(this->todir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rename_request.todir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->todir(), output);
  }

  // string fromdir = 2;
  if (this->fromdir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromdir().data(), static_cast<int>(this->fromdir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rename_request.fromdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromdir(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NfsProtocol.rename_request)
}

::google::protobuf::uint8* rename_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NfsProtocol.rename_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string todir = 1;
  if (this->todir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todir().data(), static_cast<int>(this->todir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rename_request.todir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->todir(), target);
  }

  // string fromdir = 2;
  if (this->fromdir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromdir().data(), static_cast<int>(this->fromdir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NfsProtocol.rename_request.fromdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromdir(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NfsProtocol.rename_request)
  return target;
}

size_t rename_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NfsProtocol.rename_request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string todir = 1;
  if (this->todir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->todir());
  }

  // string fromdir = 2;
  if (this->fromdir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromdir());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rename_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NfsProtocol.rename_request)
  GOOGLE_DCHECK_NE(&from, this);
  const rename_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rename_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NfsProtocol.rename_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NfsProtocol.rename_request)
    MergeFrom(*source);
  }
}

void rename_request::MergeFrom(const rename_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NfsProtocol.rename_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.todir().size() > 0) {

    todir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.todir_);
  }
  if (from.fromdir().size() > 0) {

    fromdir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromdir_);
  }
}

void rename_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NfsProtocol.rename_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rename_request::CopyFrom(const rename_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NfsProtocol.rename_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rename_request::IsInitialized() const {
  return true;
}

void rename_request::Swap(rename_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rename_request::InternalSwap(rename_request* other) {
  using std::swap;
  todir_.Swap(&other->todir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fromdir_.Swap(&other->fromdir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata rename_request::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NfsProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::attributes* Arena::CreateMaybeMessage< ::NfsProtocol::attributes >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::attributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::mkdir_request* Arena::CreateMaybeMessage< ::NfsProtocol::mkdir_request >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::mkdir_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::c_response* Arena::CreateMaybeMessage< ::NfsProtocol::c_response >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::c_response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::rmdir_request* Arena::CreateMaybeMessage< ::NfsProtocol::rmdir_request >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::rmdir_request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NfsProtocol::rename_request* Arena::CreateMaybeMessage< ::NfsProtocol::rename_request >(Arena* arena) {
  return Arena::CreateInternal< ::NfsProtocol::rename_request >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
