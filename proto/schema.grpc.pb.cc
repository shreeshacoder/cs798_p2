// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: schema.proto

#include "schema.pb.h"
#include "schema.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace NfsProtocol {

static const char* NfsServer_method_names[] = {
  "/NfsProtocol.NfsServer/server_mkdir",
  "/NfsProtocol.NfsServer/server_rmdir",
  "/NfsProtocol.NfsServer/server_rename",
};

std::unique_ptr< NfsServer::Stub> NfsServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NfsServer::Stub> stub(new NfsServer::Stub(channel));
  return stub;
}

NfsServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_server_mkdir_(NfsServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_server_rmdir_(NfsServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_server_rename_(NfsServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NfsServer::Stub::server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::NfsProtocol::c_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_server_mkdir_, context, request, response);
}

void NfsServer::Stub::experimental_async::server_mkdir(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_server_mkdir_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::Asyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_mkdir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::PrepareAsyncserver_mkdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::mkdir_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_mkdir_, context, request, false);
}

::grpc::Status NfsServer::Stub::server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::NfsProtocol::c_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_server_rmdir_, context, request, response);
}

void NfsServer::Stub::experimental_async::server_rmdir(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_server_rmdir_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::Asyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_rmdir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::PrepareAsyncserver_rmdirRaw(::grpc::ClientContext* context, const ::NfsProtocol::rmdir_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_rmdir_, context, request, false);
}

::grpc::Status NfsServer::Stub::server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::NfsProtocol::c_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_server_rename_, context, request, response);
}

void NfsServer::Stub::experimental_async::server_rename(::grpc::ClientContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_server_rename_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::Asyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_rename_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NfsProtocol::c_response>* NfsServer::Stub::PrepareAsyncserver_renameRaw(::grpc::ClientContext* context, const ::NfsProtocol::rename_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::NfsProtocol::c_response>::Create(channel_.get(), cq, rpcmethod_server_rename_, context, request, false);
}

NfsServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NfsServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NfsServer::Service, ::NfsProtocol::mkdir_request, ::NfsProtocol::c_response>(
          std::mem_fn(&NfsServer::Service::server_mkdir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NfsServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NfsServer::Service, ::NfsProtocol::rmdir_request, ::NfsProtocol::c_response>(
          std::mem_fn(&NfsServer::Service::server_rmdir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NfsServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NfsServer::Service, ::NfsProtocol::rename_request, ::NfsProtocol::c_response>(
          std::mem_fn(&NfsServer::Service::server_rename), this)));
}

NfsServer::Service::~Service() {
}

::grpc::Status NfsServer::Service::server_mkdir(::grpc::ServerContext* context, const ::NfsProtocol::mkdir_request* request, ::NfsProtocol::c_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NfsServer::Service::server_rmdir(::grpc::ServerContext* context, const ::NfsProtocol::rmdir_request* request, ::NfsProtocol::c_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NfsServer::Service::server_rename(::grpc::ServerContext* context, const ::NfsProtocol::rename_request* request, ::NfsProtocol::c_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace NfsProtocol

